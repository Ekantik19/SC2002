package model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import model.enums.ApplicationStatus;
import model.enums.FlatType;

/**
 * Class representing a report in the BTO Management System.
 * Generated by HDB Managers for project analysis.
 * 
 * @author Your Name
 * @version 1.0
 */
public class Report {
    
    private String reportId;
    private Project project;
    private String reportTitle;
    private Date generationDate;
    private List<ReportEntry> entries;
    
    /**
     * Inner class representing a single entry in a report.
     */
    public static class ReportEntry {
        private String applicantName;
        private String applicantNric;
        private int applicantAge;
        private String maritalStatus;
        private FlatType flatType;
        private Date bookingDate;
        
        /**
         * Constructor for ReportEntry.
         * 
         * @param applicantName The name of the applicant
         * @param applicantNric The NRIC of the applicant
         * @param applicantAge The age of the applicant
         * @param maritalStatus The marital status of the applicant
         * @param flatType The type of flat booked
         * @param bookingDate The date of booking
         */
        public ReportEntry(String applicantName, String applicantNric, int applicantAge,
                           String maritalStatus, FlatType flatType, Date bookingDate) {
            this.applicantName = applicantName;
            this.applicantNric = applicantNric;
            this.applicantAge = applicantAge;
            this.maritalStatus = maritalStatus;
            this.flatType = flatType;
            this.bookingDate = bookingDate;
        }
        
        // Getters
        
        public String getApplicantName() {
            return applicantName;
        }
        
        public String getApplicantNric() {
            return applicantNric;
        }
        
        public int getApplicantAge() {
            return applicantAge;
        }
        
        public String getMaritalStatus() {
            return maritalStatus;
        }
        
        public FlatType getFlatType() {
            return flatType;
        }
    }
    
    /**
     * Constructor for Report.
     * 
     * @param reportId The ID of the report
     * @param project The project the report is about
     * @param reportTitle The title of the report
     * @param generationDate The date the report was generated
     */
    public Report(String reportId, Project project, String reportTitle, Date generationDate) {
        this.reportId = reportId;
        this.project = project;
        this.reportTitle = reportTitle;
        this.generationDate = generationDate;
        this.entries = new ArrayList<>();
    }
    
    /**
     * Adds an entry to the report.
     * 
     * @param entry The entry to add
     */
    public void addEntry(ReportEntry entry) {
        entries.add(entry);
    }
    
    /**
     * Creates report entries from a list of applications.
     * 
     * @param applications The list of applications to create entries from
     */
    public void populateFromApplications(List<Application> applications) {
        for (Application app : applications) {
            if (app.getStatus() == ApplicationStatus.BOOKED) {
                Applicant applicant = app.getApplicant();
                
                ReportEntry entry = new ReportEntry(
                    applicant.getName(),
                    applicant.getNric(),
                    applicant.getAge(),
                    applicant.getMaritalStatus(),
                    app.getSelectedFlatType(),
                    app.getApplicationDate()
                );
                
                addEntry(entry);
            }
        }
    }
    
    /**
     * Filters the report entries by marital status.
     * 
     * @param maritalStatus The marital status to filter by
     * @return A new report with filtered entries
     */
    public Report filterByMaritalStatus(String maritalStatus) {
        Report filteredReport = new Report(
            reportId + "-FILTER-" + maritalStatus.toUpperCase(),
            project,
            reportTitle + " (Filtered by " + maritalStatus + ")",
            new Date()
        );
        
        for (ReportEntry entry : entries) {
            if (entry.getMaritalStatus().equalsIgnoreCase(maritalStatus)) {
                filteredReport.addEntry(entry);
            }
        }
        
        return filteredReport;
    }
    
    /**
     * Filters the report entries by flat type.
     * 
     * @param flatType The flat type to filter by
     * @return A new report with filtered entries
     */
    public Report filterByFlatType(FlatType flatType) {
        Report filteredReport = new Report(
            reportId + "-FILTER-" + flatType.getDisplayName().toUpperCase().replace("-", ""),
            project,
            reportTitle + " (Filtered by " + flatType.getDisplayName() + ")",
            new Date()
        );
        
        for (ReportEntry entry : entries) {
            if (entry.getFlatType() == flatType) {
                filteredReport.addEntry(entry);
            }
        }
        
        return filteredReport;
    }
    
    /**
     * Filters the report entries by age range.
     * 
     * @param minAge The minimum age to include
     * @param maxAge The maximum age to include
     * @return A new report with filtered entries
     */
    public Report filterByAgeRange(int minAge, int maxAge) {
        Report filteredReport = new Report(
            reportId + "-FILTER-AGE-" + minAge + "-" + maxAge,
            project,
            reportTitle + " (Filtered by Age " + minAge + "-" + maxAge + ")",
            new Date()
        );
        
        for (ReportEntry entry : entries) {
            if (entry.getApplicantAge() >= minAge && entry.getApplicantAge() <= maxAge) {
                filteredReport.addEntry(entry);
            }
        }
        
        return filteredReport;
    }
    
    // Getters
    
    public String getReportId() {
        return reportId;
    }
    
    public Project getProject() {
        return project;
    }
    
    public String getReportTitle() {
        return reportTitle;
    }
    
    public Date getGenerationDate() {
        return generationDate;
    }
    
    public List<ReportEntry> getEntries() {
        return new ArrayList<>(entries);
    }
}