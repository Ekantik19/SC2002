package controller.interfaces;

import java.util.List;

import model.HDBManager;
import model.Report;
import model.enums.FlatType;

/**
 * Interface for Report Controller in the BTO Management System.
 * Defines methods for generating and managing reports.
 * 
 * @author Your Name
 * @version 1.0
 */
public interface IReportController {
    /**
     * Generates a comprehensive project booking report.
     * 
     * @param projectName The name of the project to generate a report for
     * @param manager The manager generating the report
     * @return The generated report if successful, null otherwise
     */
    Report generateProjectBookingReport(String projectName, HDBManager manager);
    
    /**
     * Generates a filtered report based on marital status.
     * 
     * @param projectName The name of the project
     * @param maritalStatus The marital status to filter by
     * @param manager The manager generating the report
     * @return The generated filtered report
     */
    Report generateMaritalStatusReport(String projectName, String maritalStatus, HDBManager manager);
    
    /**
     * Generates a filtered report based on flat type.
     * 
     * @param projectName The name of the project
     * @param flatType The flat type to filter by
     * @param manager The manager generating the report
     * @return The generated filtered report
     */
    Report generateFlatTypeReport(String projectName, FlatType flatType, HDBManager manager);
    
    /**
     * Generates a filtered report based on age range.
     * 
     * @param projectName The name of the project
     * @param minAge The minimum age to include
     * @param maxAge The maximum age to include
     * @param manager The manager generating the report
     * @return The generated filtered report
     */
    Report generateAgeRangeReport(String projectName, int minAge, int maxAge, HDBManager manager);
    
    /**
     * Retrieves a specific report by its ID.
     * 
     * @param reportId The unique identifier of the report
     * @return The report if found, null otherwise
     */
    Report getReportById(String reportId);
    
    /**
     * Retrieves all reports for a specific project.
     * 
     * @param projectName The name of the project
     * @param manager The manager requesting the reports
     * @return A list of reports for the specified project
     */
    List<Report> getProjectReports(String projectName, HDBManager manager);
    
    /**
     * Retrieves all reports generated by a specific manager.
     * 
     * @param manager The manager who generated the reports
     * @return A list of reports generated by the specified manager
     */
    List<Report> getReportsByManager(HDBManager manager);
}