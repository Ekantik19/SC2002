package com.bto.controller.interfaces;

import java.util.List;

import com.bto.model.HDBManager;
import com.bto.model.HDBOfficer;
import com.bto.model.Receipt;
import com.bto.model.Report;
import com.bto.model.enums.FlatType;

/**
 * Interface for Report Controller in the BTO Management System.
 * Defines methods for generating reports and receipts.
 * 
 * @author Your Name
 * @version 1.0
 */
public interface IReportController {
    
    /**
     * Generates a receipt for a flat booking.
     * 
     * @param applicationId The ID of the application to generate a receipt for
     * @param officer The officer generating the receipt
     * @return The generated receipt if successful, null otherwise
     */
    Receipt generateBookingReceipt(String applicationId, HDBOfficer officer);
    
    /**
     * Generates a project booking report.
     * 
     * @param projectId The ID of the project to generate a report for
     * @param reportTitle The title of the report
     * @param manager The manager generating the report
     * @return The generated report if successful, null otherwise
     */
    Report generateProjectBookingReport(String projectId, String reportTitle, HDBManager manager);
    
    /**
     * Generates a report of bookings filtered by marital status.
     * 
     * @param projectId The ID of the project to generate a report for
     * @param maritalStatus The marital status to filter by
     * @param manager The manager generating the report
     * @return The generated report if successful, null otherwise
     */
    Report generateMaritalStatusReport(String projectId, String maritalStatus, HDBManager manager);
    
    /**
     * Generates a report of bookings filtered by flat type.
     * 
     * @param projectId The ID of the project to generate a report for
     * @param flatType The flat type to filter by
     * @param manager The manager generating the report
     * @return The generated report if successful, null otherwise
     */
    Report generateFlatTypeReport(String projectId, FlatType flatType, HDBManager manager);
    
    /**
     * Generates a report of bookings filtered by age range.
     * 
     * @param projectId The ID of the project to generate a report for
     * @param minAge The minimum age to include
     * @param maxAge The maximum age to include
     * @param manager The manager generating the report
     * @return The generated report if successful, null otherwise
     */
    Report generateAgeRangeReport(String projectId, int minAge, int maxAge, HDBManager manager);
    
    /**
     * Exports a report to a file.
     * 
     * @param reportId The ID of the report to export
     * @param filePath The path to export the report to
     * @param manager The manager exporting the report
     * @return true if the export was successful, false otherwise
     */
    boolean exportReport(String reportId, String filePath, HDBManager manager);
    
    /**
     * Gets a report by its ID.
     * 
     * @param reportId The ID of the report to retrieve
     * @return The requested report if found, null otherwise
     */
    Report getReportById(String reportId);
    
    /**
     * Gets all reports for a project.
     * 
     * @param projectId The ID of the project to get reports for
     * @param manager The manager requesting the reports
     * @return A list of reports for the specified project
     */
    List<Report> getProjectReports(String projectId, HDBManager manager);
    
    /**
     * Gets all reports generated by a manager.
     * 
     * @param manager The manager who generated the reports
     * @return A list of reports generated by the specified manager
     */
    List<Report> getReportsByManager(HDBManager manager);
}