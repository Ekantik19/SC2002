package com.bto.controller;

import java.util.List;
import java.util.stream.Collectors;

import com.bto.controller.interfaces.IReportController;
import com.bto.datamanager.ApplicationDataManager;
import com.bto.datamanager.ProjectDataManager;
import com.bto.model.Application;
import com.bto.model.HDBManager;
import com.bto.model.Project;
import com.bto.model.Report;
import com.bto.model.enums.ApplicationStatus;
import com.bto.model.enums.FlatType;

/**
 * Implementation of the Report Controller for the BTO Management System.
 * Handles report generation and retrieval functionalities.
 * 
 * @author Your Name
 * @version 1.0
 */
public class ReportController implements IReportController {
    
    private ApplicationDataManager applicationDataManager;
    private ProjectDataManager projectDataManager;
    
    /**
     * Constructor for ReportController.
     * 
     * @param applicationDataManager Manages application-related data
     * @param projectDataManager Manages project-related data
     */
    public ReportController(ApplicationDataManager applicationDataManager, 
                            ProjectDataManager projectDataManager) {
        this.applicationDataManager = applicationDataManager;
        this.projectDataManager = projectDataManager;
    }
    
    @Override
    public Report generateProjectBookingReport(String projectName, HDBManager manager) {
        // Verify the manager's authority
        Project project = projectDataManager.getProjectByName(projectName);
        if (project == null || !project.getManagerInCharge().getNric().equals(manager.getNric())) {
            return null;
        }
        
        // Get booked applications for the project
        List<Application> bookedApplications = applicationDataManager.getApplicationsByProject(projectName)
            .stream()
            .filter(app -> app.getStatus() == ApplicationStatus.BOOKED)
            .collect(Collectors.toList());
        
        // Create and populate the report
        Report report = manager.generateReport(project, "Project Booking Report");
        return report;
    }
    
    @Override
    public Report generateMaritalStatusReport(String projectName, String maritalStatus, HDBManager manager) {
        // Generate base report
        Report baseReport = generateProjectBookingReport(projectName, manager);
        
        // Filter by marital status if report generation was successful
        return baseReport != null ? baseReport.filterByMaritalStatus(maritalStatus) : null;
    }
    
    @Override
    public Report generateFlatTypeReport(String projectName, FlatType flatType, HDBManager manager) {
        // Generate base report
        Report baseReport = generateProjectBookingReport(projectName, manager);
        
        // Filter by flat type if report generation was successful
        return baseReport != null ? baseReport.filterByFlatType(flatType) : null;
    }
    
    @Override
    public Report generateAgeRangeReport(String projectName, int minAge, int maxAge, HDBManager manager) {
        // Generate base report
        Report baseReport = generateProjectBookingReport(projectName, manager);
        
        // Filter by age range if report generation was successful
        return baseReport != null ? baseReport.filterByAgeRange(minAge, maxAge) : null;
    }
    
    @Override
    public Report getReportById(String reportId) {
        // This would typically involve querying from the manager's generated reports
        return null; // Placeholder for actual implementation
    }
    
    @Override
    public List<Report> getProjectReports(String projectName, HDBManager manager) {
        // Retrieve reports for a specific project
        return manager.getGeneratedReports().stream()
            .filter(report -> report.getProject().getProjectName().equals(projectName))
            .collect(Collectors.toList());
    }
    
    @Override
    public List<Report> getReportsByManager(HDBManager manager) {
        // Retrieve all reports generated by the manager
        return manager.getGeneratedReports();
    }
}